<?xml version="1.0" encoding="UTF-8"?>

<!--suppress ALL -->
<beans
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:property="http://www.springframework.org/schema/p"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:transaction="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"

    xsi:schemaLocation="
			http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/util
            http://www.springframework.org/schema/util/spring-util.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <description>
        This file is only used in the integration tests to load all the configuration files when normally
        all the configuration files will be loaded by the web application configuration by scanning the
        starting/user directory for spring-*.xml files.
    </description>

    <context:property-placeholder
        location="classpath*:**/experimental/spring.properties"
        properties-ref="ikube.toolkit.PropertyConfigurer"/>

    <bean
        id="ikube.toolkit.Logging"
        class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
        property:staticMethod="ikube.toolkit.LOGGING.configure"/>

    <!-- This bean will look through the classpath and load every Spring properties file it finds. -->
    <bean
        id="ikube.toolkit.PropertyConfigurer"
        class="ikube.toolkit.PropertyConfigurer"
        lazy-init="false"
        init-method="initialize"
        property:fileNamePattern="spring.properties"/>

    <!-- Turn on AspectJ @Configurable support -->
    <!--<context:spring-configured />-->
    <!--<context:component-scan base-package="ikube" />-->
    <!--<context:component-scan base-package="ikube.cluster.gg" />-->
    <!--<context:component-scan base-package="ikube.experimental" />-->

    <import resource="spring-h2-jdbc.xml"/>
    <import resource="spring-grid-gain.xml"/>

    <bean
        name="defaultPersistenceUnitManager"
        class="org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager"
        property:persistenceXmlLocations-ref="persistenceXmlLocations"
        property:defaultDataSource-ref="${ikube.dataSource}"/>
    <util:list id="persistenceXmlLocations">
        <value>classpath*:META-INF/persistence/persistence.xml</value>
    </util:list>

    <!-- This bean does the injection of the entity manager into the dao. -->
    <bean
        class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
    <bean
        name="transactionManager"
        class="org.springframework.orm.jpa.JpaTransactionManager"
        property:entityManagerFactory-ref="entityManagerFactory"/>
    <bean
        name="entityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
        lazy-init="false"
        property:jpaVendorAdapter-ref="jpaAdapter"
        property:jpaPropertyMap-ref="jpaPropertyMap"
        property:dataSource-ref="${ikube.dataSource}"
        property:persistenceUnitName="${ikube.persistenceUnit}"
        property:persistenceUnitManager-ref="defaultPersistenceUnitManager"
        property:loadTimeWeaver-ref="loadTimeWeaver"/>
    <bean
        name="loadTimeWeaver"
        class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver"/>
    <bean
        name="jpaAdapter"
        class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter"
        property:database="${ikube.dataSourceType}"
        property:showSql="false"/>
    <util:map id="jpaPropertyMap">
        <!-- <entry key="openjpa.ConnectionFactoryProperties" value="PrettyPrint=true,PrettyPrintLineLength=150" /> -->
        <entry key="openjpa.Log"
               value="DefaultLevel=INFO,JDBC=INFO,SQL=INFO,File=openjpa.log,Runtime=INFO,Tool=INFO"/>

        <entry key="openjpa.DataCache" value="true(CacheSize=0,SoftReferenceSize=0)"/>
        <entry key="openjpa.QueryCache" value="true(CacheSize=0,SoftReferenceSize=0)"/>

        <entry key="openjpa.Optimistic" value="true"/>
        <entry key="openjpa.ReadLockLevel" value="none"/>
        <entry key="openjpa.WriteLockLevel" value="write"/>
        <entry key="openjpa.NontransactionalRead" value="true"/>
        <entry key="openjpa.LockTimeout" value="60000"/>

        <!--
            There is a bug somewhere, in OpenJpa or H2 but the 'FOR UPDATE LIMIT ?'
             seems to be rejected by H2, and incidentally for MySql too. Perhaps the others
             accept this syntax.
        -->
        <!-- (VersionCheckOnReadLock=false,VersionUpdateOnWriteLock=false) -->
        <!--<entry key="openjpa.LockManager" value="pessimistic"/>-->

        <entry key="openjpa.Multithreaded" value="true"/>
        <entry key="openjpa.AutoDetach" value="commit"/>
        <entry key="openjpa.FlushBeforeQueries" value="false"/>
        <entry key="openjpa.DynamicEnhancementAgent" value="true"/>
        <entry key="openjpa.RuntimeUnenhancedClasses" value="supported"/>
        <entry key="openjpa.jdbc.DBDictionary" value="${ikube.jdbc.dictionary}"/>

        <entry key="openjpa.Connection2UserName" value="${ikube.jdbc.userid}"/>
        <entry key="openjpa.Connection2Password" value="${ikube.jdbc.password}"/>
        <entry key="openjpa.Connection2URL" value="${ikube.jdbc.url}"/>
        <entry key="openjpa.Connection2DriverName" value="${ikube.jdbc.driver}"/>
        <entry key="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>

        <entry key="openjpa.ConnectionUserName" value="${ikube.jdbc.userid}"/>
        <entry key="openjpa.ConnectionPassword" value="${ikube.jdbc.password}"/>
        <entry key="openjpa.ConnectionURL" value="${ikube.jdbc.url}"/>
        <entry key="openjpa.ConnectionDriverName" value="${ikube.jdbc.driver}"/>
        <entry key="openjpa.jdbc.SynchronizeMappings" value="buildSchema(ForeignKeys=true)"/>
        <entry key="openjpa.jdbc.SchemaFactory" value="native(ForeignKeys=true)"/>
        <entry key="openjpa.InverseManager" value="true(Action=warn)"/>
    </util:map>

    <transaction:advice id="transactionAdvice" transaction-manager="transactionManager">
        <transaction:attributes>
            <transaction:method name="find*"/>
            <transaction:method name="merge*"/>
            <transaction:method name="persist*"/>
            <transaction:method name="remove*"/>
            <transaction:method name="execute*"/>
        </transaction:attributes>
    </transaction:advice>

    <aop:config>
        <aop:pointcut id="dataBaseJpaH2" expression="execution(* ikube.database.DataBaseJpaH2.*(..))"/>
        <aop:pointcut id="dataBaseJpaDb2" expression="execution(* ikube.database.DataBaseJpaDb2.*(..))"/>
        <aop:pointcut id="dataBaseJpaOracle" expression="execution(* ikube.database.DataBaseJpaOracle.*(..))"/>
        <aop:pointcut id="dataBaseJpaPostgres" expression="execution(* ikube.database.DataBaseJpaPostgres.*(..))"/>
        <aop:pointcut id="dataBaseAbstract" expression="execution(* ikube.database.ADataBaseJpa.*(..))"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="dataBaseJpaH2"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="dataBaseJpaDb2"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="dataBaseJpaOracle"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="dataBaseJpaPostgres"/>
        <aop:advisor advice-ref="transactionAdvice" pointcut-ref="dataBaseAbstract"/>
    </aop:config>

    <bean
        name="ikube.database.IDataBase"
        class="ikube.database.DataBaseJpaH2"
        lazy-init="false"/>

    <bean
        id="ikube.experimental.schedule.Scheduler"
        class="ikube.experimental.schedule.Scheduler"
        lazy-init="false"
        depends-on="ikube.cluster.gg.ClusterManagerGridGain"
        property:clusterManager-ref="ikube.cluster.gg.ClusterManagerGridGain" />

    <util:list id="contexts">
        <ref local="search-context" />
    </util:list>

    <bean
        id="search-context"
        class="ikube.experimental.Context"
        property:name="search-context"/>

    <!--
        And here we register the actors/listeners/observers to listen to specific events in the grid. The
        data structure is a map of maps of lists
    -->
    <bean
        id="ikube.experimental.listener.ListenerManager"
        class="ikube.experimental.listener.ListenerManager"
        init-method="addGridListeners"
        property:listeners-ref="ikube.experimental.listener.ListenerManager.listeners"/>

    <util:map id="ikube.experimental.listener.ListenerManager.listeners">
        <entry key="SystemMonitoringEvent" value-ref="system-event-listeners" />
        <entry key="IndexWriterEvent" value-ref="index-writer-event-listeners" />
        <entry key="OpenSearcherEvent" value-ref="open-search-event-listeners" />
        <entry key="StartDatabaseProcessingEvent" value-ref="start-database-processing-event-listeners" />
    </util:map>

    <!-- Maps keyed by the context name -->
    <util:map id="system-event-listeners">
        <entry key="search-context" value-ref="search-context-system-listeners" />
    </util:map>
    <util:map id="index-writer-event-listeners">
        <entry key="search-context" value-ref="search-context-writer-listeners" />
    </util:map>
    <util:map id="open-search-event-listeners">
        <entry key="search-context" value-ref="search-context-searcher-listeners" />
    </util:map>
    <util:map id="start-database-processing-event-listeners">
        <entry key="search-context" value-ref="search-context-database-listeners" />
    </util:map>

    <!-- Lists of writers for the context name -->
    <util:list id="search-context-system-listeners">
        <ref local="ikube.experimental.publish.SystemMonitoringPublisher" />
    </util:list>
    <util:list id="search-context-writer-listeners">
        <ref local="ikube.experimental.write.Writer" />
        <ref local="ikube.experimental.publish.IndexWriterPublisher" />
    </util:list>
    <util:list id="search-context-searcher-listeners">
        <ref local="ikube.experimental.search.Searcher" />
    </util:list>
    <util:list id="search-context-database-listeners">
        <ref local="ikube.experimental.connect.DatabaseConnector" />
    </util:list>

    <!-- These are the actors/listeners/observers that will act on the events published to the grid -->
    <bean
        id="ikube.experimental.search.Searcher"
        class="ikube.experimental.search.Searcher"/>
    <bean
        id="ikube.experimental.connect.DatabaseConnector"
        class="ikube.experimental.connect.DatabaseConnector"/>
    <bean
        id="ikube.experimental.write.Writer"
        class="ikube.experimental.write.Writer"/>
    <bean
        id="ikube.experimental.publish.IndexWriterPublisher"
        class="ikube.experimental.publish.IndexWriterPublisher"/>
    <bean
        id="ikube.experimental.publish.SystemMonitoringPublisher"
        class="ikube.experimental.publish.SystemMonitoringPublisher"/>

</beans>